import smartpy as sp

tstorage = sp.TRecord(administrator = sp.TAddress, ledger = sp.TBigMap(sp.TPair(sp.TAddress, sp.TNat), sp.TNat), metadata = sp.TBigMap(sp.TString, sp.TBytes), next_token_id = sp.TNat, operators = sp.TBigMap(sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), sp.TUnit), supply = sp.TBigMap(sp.TNat, sp.TNat), token_metadata = sp.TBigMap(sp.TNat, sp.TRecord(token_id = sp.TNat, token_info = sp.TMap(sp.TString, sp.TBytes)).layout(("token_id", "token_info")))).layout((("administrator", ("ledger", "metadata")), (("next_token_id", "operators"), ("supply", "token_metadata"))))
tparameter = sp.TVariant(balance_of = sp.TRecord(callback = sp.TContract(sp.TList(sp.TRecord(balance = sp.TNat, request = sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.TList(sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id")))).layout(("requests", "callback")), exchange = sp.TRecord(amount = sp.TNat, inventory = sp.TAddress, token_id = sp.TNat).layout(("amount", ("inventory", "token_id"))), mint = sp.TRecord(amount = sp.TNat, to_ = sp.TAddress).layout(("amount", "to_")), transfer = sp.TRecord(from_ = sp.TPair(sp.TAddress, sp.TNat), tx = sp.TRecord(amount = sp.TNat, to_ = sp.TPair(sp.TAddress, sp.TNat)).layout(("amount", "to_"))).layout(("from_", "tx")), update_operators = sp.TList(sp.TVariant(add_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator")))).layout((("balance_of", "exchange"), ("mint", ("transfer", "update_operators"))))
tprivates = { }
tviews = { "all_tokens": ((), sp.TList(sp.TNat)), "get_balance": (sp.TRecord(owner = sp.TAddress, token_id = sp.TNat).layout(("owner", "token_id")), sp.TNat), "is_operator": (sp.TRecord(operator = sp.TAddress, owner = sp.TAddress, token_id = sp.TNat).layout(("owner", ("operator", "token_id"))), sp.TBool), "total_supply": (sp.TRecord(token_id = sp.TNat).layout("token_id"), sp.TNat) }
